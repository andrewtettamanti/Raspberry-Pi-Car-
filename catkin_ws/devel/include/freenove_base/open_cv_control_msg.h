// Generated by gencpp from file freenove_base/open_cv_control_msg.msg
// DO NOT EDIT!


#ifndef FREENOVE_BASE_MESSAGE_OPEN_CV_CONTROL_MSG_H
#define FREENOVE_BASE_MESSAGE_OPEN_CV_CONTROL_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace freenove_base
{
template <class ContainerAllocator>
struct open_cv_control_msg_
{
  typedef open_cv_control_msg_<ContainerAllocator> Type;

  open_cv_control_msg_()
    : switch(false)  {
    }
  open_cv_control_msg_(const ContainerAllocator& _alloc)
    : switch(false)  {
  (void)_alloc;
    }



   typedef uint8_t _switch_type;
  _switch_type switch;





  typedef boost::shared_ptr< ::freenove_base::open_cv_control_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::freenove_base::open_cv_control_msg_<ContainerAllocator> const> ConstPtr;

}; // struct open_cv_control_msg_

typedef ::freenove_base::open_cv_control_msg_<std::allocator<void> > open_cv_control_msg;

typedef boost::shared_ptr< ::freenove_base::open_cv_control_msg > open_cv_control_msgPtr;
typedef boost::shared_ptr< ::freenove_base::open_cv_control_msg const> open_cv_control_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::freenove_base::open_cv_control_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::freenove_base::open_cv_control_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::freenove_base::open_cv_control_msg_<ContainerAllocator1> & lhs, const ::freenove_base::open_cv_control_msg_<ContainerAllocator2> & rhs)
{
  return lhs.switch == rhs.switch;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::freenove_base::open_cv_control_msg_<ContainerAllocator1> & lhs, const ::freenove_base::open_cv_control_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace freenove_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::freenove_base::open_cv_control_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freenove_base::open_cv_control_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::freenove_base::open_cv_control_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::freenove_base::open_cv_control_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freenove_base::open_cv_control_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freenove_base::open_cv_control_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::freenove_base::open_cv_control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edf4418cb54ddc10e1d7f39bd43124c4";
  }

  static const char* value(const ::freenove_base::open_cv_control_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedf4418cb54ddc10ULL;
  static const uint64_t static_value2 = 0xe1d7f39bd43124c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::freenove_base::open_cv_control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "freenove_base/open_cv_control_msg";
  }

  static const char* value(const ::freenove_base::open_cv_control_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::freenove_base::open_cv_control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool switch\n"
;
  }

  static const char* value(const ::freenove_base::open_cv_control_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::freenove_base::open_cv_control_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.switch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct open_cv_control_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::freenove_base::open_cv_control_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::freenove_base::open_cv_control_msg_<ContainerAllocator>& v)
  {
    s << indent << "switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.switch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FREENOVE_BASE_MESSAGE_OPEN_CV_CONTROL_MSG_H
