// Generated by gencpp from file freenove_base/motor_msg.msg
// DO NOT EDIT!


#ifndef FREENOVE_BASE_MESSAGE_MOTOR_MSG_H
#define FREENOVE_BASE_MESSAGE_MOTOR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace freenove_base
{
template <class ContainerAllocator>
struct motor_msg_
{
  typedef motor_msg_<ContainerAllocator> Type;

  motor_msg_()
    : left_Upper_Wheel(0)
    , left_Lower_Wheel(0)
    , right_Upper_Wheel(0)
    , right_Lower_Wheel(0)  {
    }
  motor_msg_(const ContainerAllocator& _alloc)
    : left_Upper_Wheel(0)
    , left_Lower_Wheel(0)
    , right_Upper_Wheel(0)
    , right_Lower_Wheel(0)  {
  (void)_alloc;
    }



   typedef int32_t _left_Upper_Wheel_type;
  _left_Upper_Wheel_type left_Upper_Wheel;

   typedef int32_t _left_Lower_Wheel_type;
  _left_Lower_Wheel_type left_Lower_Wheel;

   typedef int32_t _right_Upper_Wheel_type;
  _right_Upper_Wheel_type right_Upper_Wheel;

   typedef int32_t _right_Lower_Wheel_type;
  _right_Lower_Wheel_type right_Lower_Wheel;





  typedef boost::shared_ptr< ::freenove_base::motor_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::freenove_base::motor_msg_<ContainerAllocator> const> ConstPtr;

}; // struct motor_msg_

typedef ::freenove_base::motor_msg_<std::allocator<void> > motor_msg;

typedef boost::shared_ptr< ::freenove_base::motor_msg > motor_msgPtr;
typedef boost::shared_ptr< ::freenove_base::motor_msg const> motor_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::freenove_base::motor_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::freenove_base::motor_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::freenove_base::motor_msg_<ContainerAllocator1> & lhs, const ::freenove_base::motor_msg_<ContainerAllocator2> & rhs)
{
  return lhs.left_Upper_Wheel == rhs.left_Upper_Wheel &&
    lhs.left_Lower_Wheel == rhs.left_Lower_Wheel &&
    lhs.right_Upper_Wheel == rhs.right_Upper_Wheel &&
    lhs.right_Lower_Wheel == rhs.right_Lower_Wheel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::freenove_base::motor_msg_<ContainerAllocator1> & lhs, const ::freenove_base::motor_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace freenove_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::freenove_base::motor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freenove_base::motor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::freenove_base::motor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::freenove_base::motor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freenove_base::motor_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freenove_base::motor_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::freenove_base::motor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e24da12eec5391bbb4b843a4cfaed882";
  }

  static const char* value(const ::freenove_base::motor_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe24da12eec5391bbULL;
  static const uint64_t static_value2 = 0xb4b843a4cfaed882ULL;
};

template<class ContainerAllocator>
struct DataType< ::freenove_base::motor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "freenove_base/motor_msg";
  }

  static const char* value(const ::freenove_base::motor_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::freenove_base::motor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 left_Upper_Wheel\n"
"int32 left_Lower_Wheel\n"
"int32 right_Upper_Wheel\n"
"int32 right_Lower_Wheel\n"
;
  }

  static const char* value(const ::freenove_base::motor_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::freenove_base::motor_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_Upper_Wheel);
      stream.next(m.left_Lower_Wheel);
      stream.next(m.right_Upper_Wheel);
      stream.next(m.right_Lower_Wheel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::freenove_base::motor_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::freenove_base::motor_msg_<ContainerAllocator>& v)
  {
    s << indent << "left_Upper_Wheel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_Upper_Wheel);
    s << indent << "left_Lower_Wheel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_Lower_Wheel);
    s << indent << "right_Upper_Wheel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_Upper_Wheel);
    s << indent << "right_Lower_Wheel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_Lower_Wheel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FREENOVE_BASE_MESSAGE_MOTOR_MSG_H
